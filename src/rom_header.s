    AREA Start, CODE, READONLY

    IMPORT |Image$$RO$$Limit| ; End of ROM code (=start of ROM data)
    IMPORT |Image$$RW$$Base|  ; Base of RAM to initialize
    IMPORT |Image$$ZI$$Base|  ; Base and limit of area
    IMPORT |Image$$ZI$$Limit| ; to zero initialize  
    IMPORT AgbMain

    ENTRY
    EXPORT start
    
start
    b entry 

    ; BUG: The checksum of this header is wrong.
    ; If BUGFIX is defined, gbafix will fix this header.
GBAHeader
NintendoLogo
    DCB 0x24, 0xff, 0xae, 0x51, 0x69, 0x9a, 0xa2, 0x21, 0x3d, 0x84, 0x82, 0x0a
    DCB 0x84, 0xe4, 0x09, 0xad, 0x11, 0x24, 0x8b, 0x98, 0xc0, 0x81, 0x7f, 0x21
    DCB 0xa3, 0x52, 0xbe, 0x19, 0x93, 0x09, 0xce, 0x20, 0x10, 0x46, 0x4a, 0x4a
    DCB 0xf8, 0x27, 0x31, 0xec, 0x58, 0xc7, 0xe8, 0x33, 0x82, 0xe3, 0xce, 0xbf
    DCB 0x85, 0xf4, 0xdf, 0x94, 0xce, 0x4b, 0x09, 0xc1, 0x94, 0x56, 0x8a, 0xc0
    DCB 0x13, 0x72, 0xa7, 0xfc, 0x9f, 0x84, 0x4d, 0x73, 0xa3, 0xca, 0x9a, 0x61
    DCB 0x58, 0x97, 0xa3, 0x27, 0xfc, 0x03, 0x98, 0x76, 0x23, 0x1d, 0xc7, 0x61
    DCB 0x03, 0x04, 0xae, 0x56, 0xbf, 0x38, 0x84, 0x00, 0x40, 0xa7, 0x0e, 0xfd
    DCB 0xff, 0x52, 0xfe, 0x03, 0x6f, 0x95, 0x30, 0xf1, 0x97, 0xfb, 0xc0, 0x85
    DCB 0x60, 0xd6, 0x80, 0x25, 0xa9, 0x63, 0xbe, 0x03, 0x01, 0x4e, 0x38, 0xe2
    DCB 0xf9, 0xa2, 0x34, 0xff, 0xbb, 0x3e, 0x03, 0x44, 0x78, 0x00, 0x90, 0xcb
    DCB 0x88, 0x11, 0x3a, 0x94, 0x65, 0xc0, 0x7c, 0x63, 0x87, 0xf0, 0x3c, 0xaf
    DCB 0xd6, 0x25, 0xe4, 0x8b, 0x38, 0x0a, 0xac, 0x72, 0x21, 0xd4, 0xf8, 0x07
GameTitle
    DCB "Rinen Rulez", 0x00
GameCode
    DCB 0x00, 0x00, 0x00, 0x00
MakerCode
    DCB "01"
FixedValue
    DCB 0x96
MainUnitCode
    DCB 0x00
DeviceType
    DCB 0x00
Reserved1
    DCB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
SoftwareVersion
    DCB 11
    ; This checksum is incorrect. It should be 0xB7.
ComplementCheck
    IF BUGFIX = 1
      DCB 0xB7
    ELSE
      DCB 0xF0
    ENDIF
Reserved2
    DCB 0x00, 0x00
entry
    ; Set IRQ stack pointer
    ;  I  F  T    M = IRQ  
    ; [1][1][0][ 1 0 0 1 0 ] 
    mov r0, #0xD2
    msr cpsr_c, r0
    ldr sp, =0x03007fa0
    ; Set SVC stack pointer
    ;  I  F  T    M = SVC  
    ; [1][1][0][ 1 0 0 1 1 ] 
    mov r0, #0xD3
    msr cpsr_c, r0
    ldr sp, =0x03007fe0
    ldr r0, =|Image$$RO$$Limit| ; __rodata_end
    ldr r1, =|Image$$RW$$Base| ; __data_start
    ldr r3, =|Image$$ZI$$Base| ; __bss_start
    cmp r0, r1
    beq CopyDataEnd
    ; Copy .data initializers
CopyDataSection
    cmp r1, r3
    ldrlo r2, [r0], #4
    strlo r2, [r1], #4
    blo CopyDataSection
CopyDataEnd
    ldr r1, =|Image$$ZI$$Limit| ; __bss_end
    mov r2, #0
    ; Clear BSS
ClearBSSLoop
    cmp r3, r1
    strlo r2, [r3], #4
    blo ClearBSSLoop
ClearBSSEnd
    ; ok then
    ;  I  F  T    M = SVC  
    ; [0][1][0][ 1 0 0 1 1 ] 
    mov r0, #0x53
    msr cpsr_c, r0
    ; Switch to User mode and set stack pointer
    ;  I  F  T    M = User  
    ; [1][1][0][ 1 0 0 0 0 ] 
    mov r0, #0xD0
    msr cpsr_c, r0
    ldr sp, =0x03007f00
    b AgbMain
Spin
    b Spin ; silly, you didn't bl, why would it return
    END
